#coding: utf8

# This file was *autogenerated* from the file solve.sage
from sage.all_cmdline import *   # import sage library

_sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_1en4 = RealNumber('1e-4'); _sage_const_8 = Integer(8); _sage_const_1en2 = RealNumber('1e-2'); _sage_const_40 = Integer(40)#!/usr/bin/sage

# from sage.manifolds.operators import *

class UnexpectedException(Exception):
    pass

# a, b = var('a b')

alpha = _sage_const_1en4 
beta = -_sage_const_1en4 
epsilon = _sage_const_1 

__tmp__=var("a,b"); L_a_lt_b = symbolic_expression(max(a - b + alpha, _sage_const_0 )).function(a,b)
__tmp__=var("a,b"); L_a_gt_b = symbolic_expression(max(b - a + alpha, _sage_const_0 )).function(a,b)
__tmp__=var("a,b"); L_a_le_b = symbolic_expression(max(a - b, _sage_const_0 )).function(a,b)
__tmp__=var("a,b"); L_a_ge_b = symbolic_expression(max(b - a, _sage_const_0 )).function(a,b)
__tmp__=var("a,b"); L_a_eq_b = symbolic_expression(abs(a - b + alpha)).function(a,b)
__tmp__=var("a,b"); L_a_ne_b = symbolic_expression(max(-_sage_const_1 , -_sage_const_1  * abs(a - b + beta))).function(a,b)
__tmp__=var("L_S1,L_S2"); L_land = symbolic_expression(L_S1 + L_S2).function(L_S1,L_S2)
__tmp__=var("L_S1,L_S2"); L_lor = symbolic_expression(min(L_S1, L_S2)).function(L_S1,L_S2)

def strlen(x):
    for i in range(len(x)):
        if x[i] <= _sage_const_0 :
            return i
    return len(x)
    raise UnexpectedException()

def r_N_r_xi(N, x, i):
    ret = []
    # print("(N, x, i) = ", N, x, i)
    # print("N.x count", N.__code__.co_argcount)
    dxi = vector([_sage_const_0  for _ in range(len(x))])
    dxi[i] = _sage_const_1 
    for j in range(len(N(x))):
        ret.append(N(x + dxi)[j] - N(x)[j])
    return vector(ret)
    # print("x + dxi = ", (x + dxi))
    # print("strlen(x + dxi) = ", strlen(x + dxi))
    # print("strlen(x) = ", strlen(x))

"""
char[] x; // symbolized
unsigned int x_len = strlen(x);
assert(x[0] == 2 && x_len = 3);
"""
print("-" * _sage_const_8 )

var('x_len x_0')
N = lambda x: [x[_sage_const_0 ], strlen(x)]
__tmp__=var("x_0,x_len"); L = symbolic_expression(L_a_eq_b(x_0, _sage_const_2 ) + L_a_eq_b(x_len, _sage_const_3 )).function(x_0,x_len)
grad_L = L.gradient()
print("L = {}".format(L))
print("∇L = {}".format(grad_L))

max_trial = _sage_const_40 
x, y = [None for x in range(max_trial + _sage_const_1 )], [None for x in range(max_trial + _sage_const_1 )]

x[_sage_const_0 ] = vector([_sage_const_0 , _sage_const_0 , _sage_const_0 , _sage_const_0 ])

for k in range(max_trial):
    y[k] = N(x[k])
    print("x[{}] = {}".format(k, x[k]))
    print("y[{}] = {}".format(k, y[k]))

    print("L(y[k])) = {}".format(L(*y[k])))
    if L(*N(x[k])) <= _sage_const_1en2 : 
        print("found!!")
        break 

    grad_L_N_x = vector([
        grad_L(*y[k]).dot_product(r_N_r_xi(N, x[k], _sage_const_0 )),
        grad_L(*y[k]).dot_product(r_N_r_xi(N, x[k], _sage_const_1 )),
        grad_L(*y[k]).dot_product(r_N_r_xi(N, x[k], _sage_const_2 )),
        grad_L(*y[k]).dot_product(r_N_r_xi(N, x[k], _sage_const_3 )),
    ])
    if grad_L_N_x.norm() == _sage_const_0 : # 勾配消失
        print("found!!")
        break
    x[k + _sage_const_1 ] = x[k] - epsilon * grad_L_N_x
    # print("x[k+1] - x[k] = {}".format(x[k + 1] - x[k]))

