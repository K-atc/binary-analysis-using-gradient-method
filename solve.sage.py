#coding: utf8

# This file was *autogenerated* from the file solve.sage
from sage.all_cmdline import *   # import sage library

_sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_4 = Integer(4); _sage_const_8 = Integer(8)#!/usr/bin/sage

# from sage.manifolds.operators import *

class UnexpectedException(Exception):
    pass

def grad(L, x):
    ret = []
    for x_i in x:
        ret.append(L.diff(x_i))
    return vector(ret)

a, b = var('a b')

alpha = _sage_const_1 
beta = -_sage_const_1 

L_a_lt_b = max(a - b + alpha, _sage_const_0 )
L_a_gt_b = max(b - a + alpha, _sage_const_0 )
L_a_le_b = max(a - b, _sage_const_0 )
L_a_ge_b = max(b - a, _sage_const_0 )
L_a_eq_b = abs(a - b)
L_a_ne_b = max(-_sage_const_1 , -_sage_const_1  * abs(a - b + beta))
L_land = lambda L_S1, L_S2: L_S1 + L_S2
L_lor = lambda L_S1, L_S2: min(L_S1, L_S2)

print(L_a_lt_b(_sage_const_1 , _sage_const_0 ))

print("∂L/∂a = ")
print(L_a_eq_b.diff(a))

print("∇L = ")
print(grad(L_a_eq_b, [a, b]))

def strlen(x):
    # print("strlen: x = ", x, len(x))
    for i in range(len(x)):
        if x[i] == _sage_const_0 :
            return i
    return len(x) + _sage_const_1 
    raise UnexpectedException()

def r_N_r_xi(N, x, i):
    ret = []
    # print("(N, x, i) = ", N, x, i)
    # print("N.x count", N.__code__.co_argcount)
    dxi = vector([_sage_const_0  for _ in range(len(x))])
    dxi[i] = _sage_const_1 
    for j in range(N.__code__.co_argcount):
        ret.append(N(x + dxi)[j] - N(x)[j])
    return vector(ret)
    # print("x + dxi = ", (x + dxi))
    # print("strlen(x + dxi) = ", strlen(x + dxi))
    # print("strlen(x) = ", strlen(x))

"""
char[] x; // symbolized
unsigned int x_len = strlen(x);
assert(x[0] == 2 && x_len = 3);
"""
print("-" * _sage_const_8 )

x_len = var('x_len')
N = lambda x: vector([strlen(x)])
L_y = [x_len]
L = L_a_eq_b(L_y[_sage_const_0 ], _sage_const_3 ) # <=> x_len == 2
grad_L = grad(L, L_y)
print("L = {}".format(L))
print("∇L = {}".format(grad_L))

x, y = [None for x in range(_sage_const_8 )], [None for x in range(_sage_const_8 )]

x[_sage_const_0 ] = vector([_sage_const_0 , _sage_const_0 , _sage_const_0 , _sage_const_0 ])

for k in range(_sage_const_4 ):
    print("x[{}] = {}".format(k, x[k]))
    y[k] = strlen(x[k])
    if L(y[k]) == _sage_const_0 : # ゼロ除算対策
        print("found!!")
        break
    r_z_r_x = [
        grad_L(y[k]).dot_product(r_N_r_xi(N, x[k], _sage_const_0 )),
        grad_L(y[k]).dot_product(r_N_r_xi(N, x[k], _sage_const_1 )),
        grad_L(y[k]).dot_product(r_N_r_xi(N, x[k], _sage_const_2 )),
        grad_L(y[k]).dot_product(r_N_r_xi(N, x[k], _sage_const_3 )),
        ]
    grad_L_N_x = vector(r_z_r_x)
    if grad_L_N_x.norm() == _sage_const_0 : # 勾配消失
        print("found!!")
        break
    x[k + _sage_const_1 ] = x[k] - grad_L_N_x

